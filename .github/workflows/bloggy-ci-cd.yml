#workflow의 이름 지정
name: Bloggy-CI-CD
#동작 트리거 설정
on:
  #Bloggy-Test 워크플로우가 통과하면 동작
  push:
    branches: [dev]

jobs:
  Build-and-Deploy:
    #runs-on: ubuntu-22.04
    runs-on: ubuntu-latest
    env:
      Container: bloggy-front
      Image: ${{ secrets.DOCKERHUB_NICKNAME }}/bloggy:latest
      Api: ${{ secrets.ENV_VALUE }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Create env file
        run: touch .env.production
      - name: Set env file
        run: echo "${{ env.Api }}" > .env.production
      - name: Verify env file content
        run: cat .env.production
      - uses: actions/upload-artifact@v2 #위에서 생성한 .env파일을 디렉토리에 집어넣기
        with:
          name: .env.production
          path: ./.env.production
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ env.Image }}
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.SSH_PORT }}

          #최초 이미지 빌드 및 컨테이너 생성 시에 대한 에러 처리를 위해 if~else 조건문 추가
          script: |
            if docker stop "${{ env.Container }}" 2>/dev/null; then
             echo "Container stopped successfully or not found"
            else
             echo "Error: Container does not exist or could not be stopped"
            fi

            if docker rmi "${{ env.Image }}" 2>/dev/null; then
             echo "Image removed successfully or not found"
            else
             echo "Error: Image does not exist or could not be removed"
            fi

            if docker pull "${{ env.Image }}"; then
             echo "Image pulled and container started successfully"
            else
             echo "Error: Failed to pull the image"
            fi

            if docker run --rm --name "${{ env.Container }}" -dp 3000:3000 "${{ env.Image }}"; then
             echo "Container created and run successfully"
            else
             echo "Error: Failed to run the container"
            fi
          # docker stop ${{ env.Container }}
          # docker rmi "${{ env.Image }}"
          # docker pull "${{ env.Image }}"
          # docker run --rm --name "${{ env.Container }}" -dp 80:3000 "${{ env.Image }}"
