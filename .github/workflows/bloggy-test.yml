name: Bloggy-Test
on:
  pull_request:
    branches: ['develop']
jobs:
  Run-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Set node-version 16.17.0
        uses: actions/setup-node@v3
        with:
          node-version: 16.17.0
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      #1. actions/cache : 파일들을 github 캐시에 올려 >> $GITHUB_OUTPUT놓고 사용한다. 설정한 키에 해당하는 데이터가 캐시에 존재하면 해당 데이터들을 내려받는다.
      #존재하지 않으면, 파일들을 캐시에 올려 놓는다.
      #1-1. cache actions에는 두 가지 옵션을 필수적으로 설정해줘야 한다.
      #1-2. path : 캐싱할 파일들이 있는 경로 지정
      #1-3. key : 캐싱 여부를 구분할 key
      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install
      #실행환경에서 cpu코어 수를 계산하여 병렬 테스트 수행. 소규모 테스트일 경우에는 역효과일 수 있음.
      #https://jestjs.io/docs/troubleshooting
      - name: Get number of CPU cores
        id: cpu-cores
        uses: SimenB/github-actions-cpu-cores@v1
      - name: Run tests
        run: yarn test --max-workers ${{ steps.cpu-cores.outputs.count }}
